{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nconst useStore = create(persist((set, get) => ({\n  // Authentication & UI state\n  user: null,\n  token: null,\n  topics: [],\n  selectedTopic: null,\n  selectedProblem: null,\n  isSidebarVisible: true,\n  isDarkMode: false,\n  searchResults: [],\n  isAuthenticated: false,\n  // Set user and token (user id is used in subsequent API calls)\n  setUser: (user, token = null) => set({\n    user,\n    token,\n    isAuthenticated: !!token\n  }),\n  // Clear persisted data on logout\n  logout: () => {\n    localStorage.removeItem('coding-notes-storage');\n    set({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      topics: []\n    });\n  },\n  // --------------------------\n  // TOPICS FUNCTIONS\n  // --------------------------\n\n  // Fetch topics for the authenticated user\n  fetchTopics: async () => {\n    try {\n      const token = get().token;\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/topics`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        const topicsData = await res.json();\n        // Format topics (assuming the backend returns _id)\n        const formattedTopics = topicsData.map(topic => ({\n          topicId: topic.topicId || topic._id,\n          // adjust if your backend returns topicId explicitly\n          title: topic.title,\n          userId: topic.userId,\n          problems: topic.problems || {}\n        }));\n        set({\n          topics: formattedTopics\n        });\n      } else {\n        const errorText = await res.text();\n        console.error('Failed to fetch topics:', errorText);\n      }\n    } catch (error) {\n      console.error('Error fetching topics:', error);\n    }\n  },\n  // Create a new topic\n  addTopic: async title => {\n    try {\n      const token = get().token;\n      const user = get().user;\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/topics`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        // You may generate a topicId client-side if needed, or let backend handle it.\n        body: JSON.stringify({\n          title,\n          userId: user ? user._id : null\n        })\n      });\n      if (res.ok) {\n        const newTopic = await res.json();\n        set(state => ({\n          topics: [...state.topics, {\n            ...newTopic,\n            problems: {}\n          }]\n        }));\n      } else {\n        const errorText = await res.text();\n        console.error('Failed to add topic:', errorText);\n      }\n    } catch (error) {\n      console.error('Error adding topic:', error);\n    }\n  },\n  // Delete a topic\n  deleteTopic: async topicId => {\n    try {\n      const token = get().token;\n      await fetch(`${process.env.REACT_APP_API_URL}/api/problems/topics/${topicId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    } catch (error) {\n      console.error('Error deleting topic on backend:', error);\n    }\n    set(state => ({\n      topics: state.topics.filter(topic => topic.topicId !== topicId)\n    }));\n  },\n  // --------------------------\n  // PROBLEMS FUNCTIONS\n  // --------------------------\n\n  // Fetch all problems and merge them into their topics\n  fetchProblems: async () => {\n    try {\n      const token = get().token;\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/problems`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        const problems = await res.json();\n        set(state => {\n          // Reset problems in each topic\n          const topics = state.topics.map(topic => ({\n            ...topic,\n            problems: {}\n          }));\n          // Add problems to the correct topic (or create a new topic if needed)\n          problems.forEach(problem => {\n            const topicIndex = topics.findIndex(t => t.topicId === problem.topicId);\n            if (topicIndex > -1) {\n              topics[topicIndex].problems[problem.problemId] = problem;\n            } else {\n              topics.push({\n                topicId: problem.topicId,\n                title: problem.topicTitle || problem.topicId,\n                userId: problem.userId,\n                problems: {\n                  [problem.problemId]: problem\n                }\n              });\n            }\n          });\n          return {\n            topics\n          };\n        });\n      } else {\n        const errorText = await res.text();\n        console.error('Failed to fetch problems:', errorText);\n      }\n    } catch (error) {\n      console.error('Error fetching problems:', error);\n    }\n  },\n  // Create a new problem\n  createProblem: async problemData => {\n    try {\n      const user = get().user;\n      const token = get().token;\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/problems`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...problemData,\n          userId: user ? user._id : null\n        })\n      });\n      if (res.ok) {\n        const newProblem = await res.json();\n        set(state => {\n          const topics = [...state.topics];\n          const topicIndex = topics.findIndex(t => t.topicId === newProblem.topicId);\n          if (topicIndex > -1) {\n            topics[topicIndex] = {\n              ...topics[topicIndex],\n              problems: {\n                ...topics[topicIndex].problems,\n                [newProblem.problemId]: newProblem\n              }\n            };\n          } else {\n            topics.push({\n              topicId: newProblem.topicId,\n              title: problemData.topicTitle || newProblem.topicId,\n              userId: user ? user._id : null,\n              problems: {\n                [newProblem.problemId]: newProblem\n              }\n            });\n          }\n          return {\n            topics\n          };\n        });\n      } else {\n        const errorText = await res.text();\n        console.error('Failed to create problem:', errorText);\n      }\n    } catch (error) {\n      console.error('Error creating problem:', error);\n    }\n  },\n  // Update a problem\n  updateProblem: async (topicId, problemId, updates) => {\n    try {\n      const token = get().token;\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/problems/${problemId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(updates)\n      });\n      if (res.ok) {\n        const updatedProblem = await res.json();\n        set(state => ({\n          topics: state.topics.map(topic => topic.topicId === topicId ? {\n            ...topic,\n            problems: {\n              ...topic.problems,\n              [problemId]: updatedProblem\n            }\n          } : topic),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? updatedProblem : state.selectedProblem\n        }));\n      } else {\n        const errorText = await res.text();\n        console.error('Failed to update problem:', errorText);\n      }\n    } catch (error) {\n      console.error('Error updating problem:', error);\n    }\n  },\n  // Delete a problem\n  deleteProblem: async (topicId, problemId) => {\n    try {\n      const token = get().token;\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/problems/${problemId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        set(state => {\n          const topics = state.topics.map(topic => {\n            if (topic.topicId === topicId) {\n              const newProblems = Object.fromEntries(Object.entries(topic.problems).filter(([key]) => key !== problemId));\n              return {\n                ...topic,\n                problems: newProblems\n              };\n            }\n            return topic;\n          });\n          return {\n            topics: topics.filter(topic => Object.keys(topic.problems).length > 0),\n            selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? null : state.selectedProblem\n          };\n        });\n      } else {\n        const errorText = await res.text();\n        console.error('Failed to delete problem:', errorText);\n      }\n    } catch (error) {\n      console.error('Error deleting problem:', error);\n    }\n  },\n  // Alias for creating a problem\n  addProblem: async (topicId, problemData) => {\n    await get().createProblem({\n      ...problemData,\n      topicId\n    });\n  },\n  // --------------------------\n  // LOCAL SETTERS & UI HELPERS\n  // --------------------------\n  setTopics: topics => set({\n    topics\n  }),\n  setSelectedTopic: topic => set({\n    selectedTopic: topic\n  }),\n  setSelectedProblem: problem => set({\n    selectedProblem: problem\n  }),\n  toggleSidebar: () => set({\n    isSidebarVisible: !get().isSidebarVisible\n  }),\n  toggleDarkMode: () => {\n    const newDarkMode = !get().isDarkMode;\n    set({\n      isDarkMode: newDarkMode\n    });\n    document.documentElement.classList.toggle('dark', newDarkMode);\n  },\n  // --------------------------\n  // SEARCH & FAVORITES\n  // --------------------------\n  searchProblems: query => {\n    const state = get();\n    if (!query.trim()) {\n      set({\n        searchResults: []\n      });\n      return;\n    }\n    const results = state.topics.flatMap(topic => Object.values(topic.problems).filter(problem => problem.title.toLowerCase().includes(query.toLowerCase()) || problem.statement.toLowerCase().includes(query.toLowerCase()) || problem.difficulty.toLowerCase() === query.toLowerCase()));\n    set({\n      searchResults: results\n    });\n  },\n  toggleFavorite: async problemId => {\n    try {\n      const state = get();\n      let problem;\n      for (const topic of state.topics) {\n        if (topic.problems[problemId]) {\n          problem = topic.problems[problemId];\n          break;\n        }\n      }\n      if (!problem) return;\n      const token = state.token;\n      const url = `${process.env.REACT_APP_API_URL}/api/users/favorites`;\n      const method = problem.isFavorite ? 'DELETE' : 'POST';\n      const res = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          problemId\n        })\n      });\n      if (res.ok) {\n        set(state => ({\n          topics: state.topics.map(topic => {\n            if (topic.problems[problemId]) {\n              return {\n                ...topic,\n                problems: {\n                  ...topic.problems,\n                  [problemId]: {\n                    ...topic.problems[problemId],\n                    isFavorite: !topic.problems[problemId].isFavorite\n                  }\n                }\n              };\n            }\n            return topic;\n          }),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? {\n            ...state.selectedProblem,\n            isFavorite: !state.selectedProblem.isFavorite\n          } : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error toggling favorite:', error);\n    }\n  },\n  toggleSavedForLater: async problemId => {\n    try {\n      const state = get();\n      let problem;\n      for (const topic of state.topics) {\n        if (topic.problems[problemId]) {\n          problem = topic.problems[problemId];\n          break;\n        }\n      }\n      if (!problem) return;\n      const token = state.token;\n      const url = `${process.env.REACT_APP_API_URL}/api/users/saved`;\n      const method = problem.isSavedForLater ? 'DELETE' : 'POST';\n      const res = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          problemId\n        })\n      });\n      if (res.ok) {\n        set(state => ({\n          topics: state.topics.map(topic => {\n            if (topic.problems[problemId]) {\n              return {\n                ...topic,\n                problems: {\n                  ...topic.problems,\n                  [problemId]: {\n                    ...topic.problems[problemId],\n                    isSavedForLater: !topic.problems[problemId].isSavedForLater\n                  }\n                }\n              };\n            }\n            return topic;\n          }),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? {\n            ...state.selectedProblem,\n            isSavedForLater: !state.selectedProblem.isSavedForLater\n          } : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error toggling saved for later:', error);\n    }\n  },\n  toggleSolved: async problemId => {\n    try {\n      const state = get();\n      let problem;\n      for (const topic of state.topics) {\n        if (topic.problems[problemId]) {\n          problem = topic.problems[problemId];\n          break;\n        }\n      }\n      if (!problem) return;\n      const token = state.token;\n      const url = `${process.env.REACT_APP_API_URL}/api/users/solved`;\n      const res = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          problemId\n        })\n      });\n      if (res.ok) {\n        set(state => ({\n          topics: state.topics.map(topic => {\n            if (topic.problems[problemId]) {\n              return {\n                ...topic,\n                problems: {\n                  ...topic.problems,\n                  [problemId]: {\n                    ...topic.problems[problemId],\n                    isSolved: !topic.problems[problemId].isSolved\n                  }\n                }\n              };\n            }\n            return topic;\n          }),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? {\n            ...state.selectedProblem,\n            isSolved: !state.selectedProblem.isSolved\n          } : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error toggling solved:', error);\n    }\n  },\n  // --------------------------\n  // AUTHENTICATION HELPER\n  // --------------------------\n  verifyToken: async () => {\n    const token = get().token;\n    if (!token) return false;\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/auth/verify`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return res.ok;\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      return false;\n    }\n  }\n}), {\n  name: 'coding-notes-storage'\n}));\nexport default useStore;","map":{"version":3,"names":["create","persist","useStore","set","get","user","token","topics","selectedTopic","selectedProblem","isSidebarVisible","isDarkMode","searchResults","isAuthenticated","setUser","logout","localStorage","removeItem","fetchTopics","res","fetch","process","env","REACT_APP_API_URL","headers","ok","topicsData","json","formattedTopics","map","topic","topicId","_id","title","userId","problems","errorText","text","console","error","addTopic","method","body","JSON","stringify","newTopic","state","deleteTopic","filter","fetchProblems","forEach","problem","topicIndex","findIndex","t","problemId","push","topicTitle","createProblem","problemData","newProblem","updateProblem","updates","updatedProblem","deleteProblem","newProblems","Object","fromEntries","entries","key","keys","length","addProblem","setTopics","setSelectedTopic","setSelectedProblem","toggleSidebar","toggleDarkMode","newDarkMode","document","documentElement","classList","toggle","searchProblems","query","trim","results","flatMap","values","toLowerCase","includes","statement","difficulty","toggleFavorite","url","isFavorite","toggleSavedForLater","isSavedForLater","toggleSolved","isSolved","verifyToken","name"],"sources":["D:/FInal Projects/CodeSave/frontend/src/store/useStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\n\r\nconst useStore = create(\r\n  persist(\r\n    (set, get) => ({\r\n      // Authentication & UI state\r\n      user: null,\r\n      token: null,\r\n      topics: [],\r\n      selectedTopic: null,\r\n      selectedProblem: null,\r\n      isSidebarVisible: true,\r\n      isDarkMode: false,\r\n      searchResults: [],\r\n      isAuthenticated: false,\r\n\r\n      // Set user and token (user id is used in subsequent API calls)\r\n      setUser: (user, token = null) =>\r\n        set({ user, token, isAuthenticated: !!token }),\r\n\r\n      // Clear persisted data on logout\r\n      logout: () => {\r\n        localStorage.removeItem('coding-notes-storage');\r\n        set({ user: null, token: null, isAuthenticated: false, topics: [] });\r\n      },\r\n\r\n      // --------------------------\r\n      // TOPICS FUNCTIONS\r\n      // --------------------------\r\n\r\n      // Fetch topics for the authenticated user\r\n      fetchTopics: async () => {\r\n        try {\r\n          const token = get().token;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/topics`,\r\n            { headers: { 'Authorization': `Bearer ${token}` } }\r\n          );\r\n          if (res.ok) {\r\n            const topicsData = await res.json();\r\n            // Format topics (assuming the backend returns _id)\r\n            const formattedTopics = topicsData.map((topic) => ({\r\n              topicId: topic.topicId || topic._id, // adjust if your backend returns topicId explicitly\r\n              title: topic.title,\r\n              userId: topic.userId,\r\n              problems: topic.problems || {},\r\n            }));\r\n            set({ topics: formattedTopics });\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to fetch topics:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching topics:', error);\r\n        }\r\n      },\r\n\r\n      // Create a new topic\r\n      addTopic: async (title) => {\r\n        try {\r\n          const token = get().token;\r\n          const user = get().user;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/topics`,\r\n            {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`,\r\n              },\r\n              // You may generate a topicId client-side if needed, or let backend handle it.\r\n              body: JSON.stringify({ title, userId: user ? user._id : null }),\r\n            }\r\n          );\r\n          if (res.ok) {\r\n            const newTopic = await res.json();\r\n            set((state) => ({\r\n              topics: [...state.topics, { ...newTopic, problems: {} }],\r\n            }));\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to add topic:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error adding topic:', error);\r\n        }\r\n      },\r\n\r\n      // Delete a topic\r\n      deleteTopic: async (topicId) => {\r\n        try {\r\n          const token = get().token;\r\n          await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/topics/${topicId}`,\r\n            {\r\n              method: 'DELETE',\r\n              headers: { 'Authorization': `Bearer ${token}` },\r\n            }\r\n          );\r\n        } catch (error) {\r\n          console.error('Error deleting topic on backend:', error);\r\n        }\r\n        set((state) => ({\r\n          topics: state.topics.filter((topic) => topic.topicId !== topicId),\r\n        }));\r\n      },\r\n\r\n      // --------------------------\r\n      // PROBLEMS FUNCTIONS\r\n      // --------------------------\r\n\r\n      // Fetch all problems and merge them into their topics\r\n      fetchProblems: async () => {\r\n        try {\r\n          const token = get().token;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/problems`,\r\n            { headers: { 'Authorization': `Bearer ${token}` } }\r\n          );\r\n          if (res.ok) {\r\n            const problems = await res.json();\r\n            set((state) => {\r\n              // Reset problems in each topic\r\n              const topics = state.topics.map((topic) => ({\r\n                ...topic,\r\n                problems: {},\r\n              }));\r\n              // Add problems to the correct topic (or create a new topic if needed)\r\n              problems.forEach((problem) => {\r\n                const topicIndex = topics.findIndex(\r\n                  (t) => t.topicId === problem.topicId\r\n                );\r\n                if (topicIndex > -1) {\r\n                  topics[topicIndex].problems[problem.problemId] = problem;\r\n                } else {\r\n                  topics.push({\r\n                    topicId: problem.topicId,\r\n                    title: problem.topicTitle || problem.topicId,\r\n                    userId: problem.userId,\r\n                    problems: { [problem.problemId]: problem },\r\n                  });\r\n                }\r\n              });\r\n              return { topics };\r\n            });\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to fetch problems:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching problems:', error);\r\n        }\r\n      },\r\n\r\n      // Create a new problem\r\n      createProblem: async (problemData) => {\r\n        try {\r\n          const user = get().user;\r\n          const token = get().token;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/problems`,\r\n            {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`,\r\n              },\r\n              body: JSON.stringify({\r\n                ...problemData,\r\n                userId: user ? user._id : null,\r\n              }),\r\n            }\r\n          );\r\n          if (res.ok) {\r\n            const newProblem = await res.json();\r\n            set((state) => {\r\n              const topics = [...state.topics];\r\n              const topicIndex = topics.findIndex(\r\n                (t) => t.topicId === newProblem.topicId\r\n              );\r\n              if (topicIndex > -1) {\r\n                topics[topicIndex] = {\r\n                  ...topics[topicIndex],\r\n                  problems: {\r\n                    ...topics[topicIndex].problems,\r\n                    [newProblem.problemId]: newProblem,\r\n                  },\r\n                };\r\n              } else {\r\n                topics.push({\r\n                  topicId: newProblem.topicId,\r\n                  title: problemData.topicTitle || newProblem.topicId,\r\n                  userId: user ? user._id : null,\r\n                  problems: { [newProblem.problemId]: newProblem },\r\n                });\r\n              }\r\n              return { topics };\r\n            });\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to create problem:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error creating problem:', error);\r\n        }\r\n      },\r\n\r\n      // Update a problem\r\n      updateProblem: async (topicId, problemId, updates) => {\r\n        try {\r\n          const token = get().token;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/problems/${problemId}`,\r\n            {\r\n              method: 'PUT',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`,\r\n              },\r\n              body: JSON.stringify(updates),\r\n            }\r\n          );\r\n          if (res.ok) {\r\n            const updatedProblem = await res.json();\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) =>\r\n                topic.topicId === topicId\r\n                  ? {\r\n                      ...topic,\r\n                      problems: {\r\n                        ...topic.problems,\r\n                        [problemId]: updatedProblem,\r\n                      },\r\n                    }\r\n                  : topic\r\n              ),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? updatedProblem\r\n                  : state.selectedProblem,\r\n            }));\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to update problem:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error updating problem:', error);\r\n        }\r\n      },\r\n\r\n      // Delete a problem\r\n      deleteProblem: async (topicId, problemId) => {\r\n        try {\r\n          const token = get().token;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/problems/${problemId}`,\r\n            {\r\n              method: 'DELETE',\r\n              headers: { 'Authorization': `Bearer ${token}` },\r\n            }\r\n          );\r\n          if (res.ok) {\r\n            set((state) => {\r\n              const topics = state.topics.map((topic) => {\r\n                if (topic.topicId === topicId) {\r\n                  const newProblems = Object.fromEntries(\r\n                    Object.entries(topic.problems).filter(\r\n                      ([key]) => key !== problemId\r\n                    )\r\n                  );\r\n                  return { ...topic, problems: newProblems };\r\n                }\r\n                return topic;\r\n              });\r\n              return {\r\n                topics: topics.filter(\r\n                  (topic) => Object.keys(topic.problems).length > 0\r\n                ),\r\n                selectedProblem:\r\n                  state.selectedProblem &&\r\n                  state.selectedProblem.problemId === problemId\r\n                    ? null\r\n                    : state.selectedProblem,\r\n              };\r\n            });\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to delete problem:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error deleting problem:', error);\r\n        }\r\n      },\r\n\r\n      // Alias for creating a problem\r\n      addProblem: async (topicId, problemData) => {\r\n        await get().createProblem({ ...problemData, topicId });\r\n      },\r\n\r\n      // --------------------------\r\n      // LOCAL SETTERS & UI HELPERS\r\n      // --------------------------\r\n      setTopics: (topics) => set({ topics }),\r\n      setSelectedTopic: (topic) => set({ selectedTopic: topic }),\r\n      setSelectedProblem: (problem) => set({ selectedProblem: problem }),\r\n\r\n      toggleSidebar: () =>\r\n        set({ isSidebarVisible: !get().isSidebarVisible }),\r\n\r\n      toggleDarkMode: () => {\r\n        const newDarkMode = !get().isDarkMode;\r\n        set({ isDarkMode: newDarkMode });\r\n        document.documentElement.classList.toggle('dark', newDarkMode);\r\n      },\r\n\r\n      // --------------------------\r\n      // SEARCH & FAVORITES\r\n      // --------------------------\r\n      searchProblems: (query) => {\r\n        const state = get();\r\n        if (!query.trim()) {\r\n          set({ searchResults: [] });\r\n          return;\r\n        }\r\n        const results = state.topics.flatMap((topic) =>\r\n          Object.values(topic.problems).filter(\r\n            (problem) =>\r\n              problem.title.toLowerCase().includes(query.toLowerCase()) ||\r\n              problem.statement.toLowerCase().includes(query.toLowerCase()) ||\r\n              problem.difficulty.toLowerCase() === query.toLowerCase()\r\n          )\r\n        );\r\n        set({ searchResults: results });\r\n      },\r\n\r\n      toggleFavorite: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/favorites`;\r\n          const method = problem.isFavorite ? 'DELETE' : 'POST';\r\n          const res = await fetch(url, {\r\n            method,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ problemId }),\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isFavorite: !topic.problems[problemId].isFavorite,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? {\r\n                      ...state.selectedProblem,\r\n                      isFavorite: !state.selectedProblem.isFavorite,\r\n                    }\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling favorite:', error);\r\n        }\r\n      },\r\n\r\n      toggleSavedForLater: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/saved`;\r\n          const method = problem.isSavedForLater ? 'DELETE' : 'POST';\r\n          const res = await fetch(url, {\r\n            method,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ problemId }),\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isSavedForLater: !topic.problems[problemId].isSavedForLater,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? {\r\n                      ...state.selectedProblem,\r\n                      isSavedForLater: !state.selectedProblem.isSavedForLater,\r\n                    }\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling saved for later:', error);\r\n        }\r\n      },\r\n\r\n      toggleSolved: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/solved`;\r\n          const res = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ problemId }),\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isSolved: !topic.problems[problemId].isSolved,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? {\r\n                      ...state.selectedProblem,\r\n                      isSolved: !state.selectedProblem.isSolved,\r\n                    }\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling solved:', error);\r\n        }\r\n      },\r\n\r\n      // --------------------------\r\n      // AUTHENTICATION HELPER\r\n      // --------------------------\r\n      verifyToken: async () => {\r\n        const token = get().token;\r\n        if (!token) return false;\r\n        try {\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/auth/verify`,\r\n            { headers: { 'Authorization': `Bearer ${token}` } }\r\n          );\r\n          return res.ok;\r\n        } catch (error) {\r\n          console.error('Error verifying token:', error);\r\n          return false;\r\n        }\r\n      },\r\n    }),\r\n    { name: 'coding-notes-storage' }\r\n  )\r\n);\r\n\r\nexport default useStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}