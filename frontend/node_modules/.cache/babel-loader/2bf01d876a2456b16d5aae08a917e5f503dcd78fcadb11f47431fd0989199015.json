{"ast":null,"code":"import{create}from'zustand';import{persist}from'zustand/middleware';const useStore=create(persist((set,get)=>({// Authentication & UI state\nuser:null,token:null,topics:[],selectedTopic:null,selectedProblem:null,isSidebarVisible:true,isDarkMode:false,searchResults:[],isAuthenticated:false,// Set user and token (user id is used for subsequent API calls)\nsetUser:function(user){let token=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;return set({user,token,isAuthenticated:!!token});},// Clear persisted data on logout\nlogout:()=>{localStorage.removeItem('coding-notes-storage');set({user:null,token:null,isAuthenticated:false,topics:[]});},// --------------------------\n// TOPICS FUNCTIONS\n// --------------------------\n// Fetch topics for the authenticated user\nfetchTopics:async()=>{try{const token=get().token;const res=await fetch(`${process.env.REACT_APP_API_URL}/api/problems/topics`,{headers:{'Authorization':`Bearer ${token}`}});if(res.ok){const topicsData=await res.json();// Format topics (adjust according to your backend schema)\nconst formattedTopics=topicsData.map(topic=>({topicId:topic.topicId||topic._id,title:topic.title,userId:topic.userId,problems:topic.problems||{}}));set({topics:formattedTopics});}else{const errorText=await res.text();console.error('Failed to fetch topics:',errorText);}}catch(error){console.error('Error fetching topics:',error);}},// Create a new topic with a generated topicId and a default picid\naddTopic:async title=>{try{const token=get().token;const user=get().user;// Generate a unique topicId using userId, timestamp, and a random string.\nconst topicId=`${user._id}_${Date.now()}_${Math.random().toString(36).substring(2,8)}`;const res=await fetch(`${process.env.REACT_APP_API_URL}/api/problems/topics`,{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`},body:JSON.stringify({topicId,title,userId:user?user._id:null,picid:'defaultPicId'})});if(res.ok){const newTopic=await res.json();set(state=>({topics:[...state.topics,{...newTopic,problems:{}}]}));}else{const errorText=await res.text();console.error('Failed to add topic:',errorText);}}catch(error){console.error('Error adding topic:',error);}},// Delete a topic\ndeleteTopic:async topicId=>{try{const token=get().token;await fetch(`${process.env.REACT_APP_API_URL}/api/problems/topics/${topicId}`,{method:'DELETE',headers:{'Authorization':`Bearer ${token}`}});}catch(error){console.error('Error deleting topic on backend:',error);}set(state=>({topics:state.topics.filter(topic=>topic.topicId!==topicId)}));},// --------------------------\n// PROBLEMS FUNCTIONS\n// --------------------------\n// Fetch all problems and merge them into their topics\nfetchProblems:async()=>{try{const token=get().token;const res=await fetch(`${process.env.REACT_APP_API_URL}/api/problems/problems`,{headers:{'Authorization':`Bearer ${token}`}});if(res.ok){const problems=await res.json();set(state=>{// Reset problems in each topic\nconst topics=state.topics.map(topic=>({...topic,problems:{}}));// Merge each problem into its corresponding topic\nproblems.forEach(problem=>{const topicIndex=topics.findIndex(t=>t.topicId===problem.topicId);if(topicIndex>-1){topics[topicIndex].problems[problem.problemId]=problem;}else{topics.push({topicId:problem.topicId,title:problem.topicTitle||problem.topicId,userId:problem.userId,problems:{[problem.problemId]:problem}});}});return{topics};});}else{const errorText=await res.text();console.error('Failed to fetch problems:',errorText);}}catch(error){console.error('Error fetching problems:',error);}},// Create a new problem with a unique problemId.\n// If the statement is missing or empty, set a default value.\ncreateProblem:async problemData=>{try{const user=get().user;const token=get().token;// Generate a random string of 6 characters for uniqueness.\nconst randomPart=Math.random().toString(36).substring(2,8);// Construct the problemId: userId_topicId_random\nconst problemId=`${user._id}_${problemData.topicId}_${randomPart}`;const payload={...problemData,userId:user?user._id:null,// Ensure statement is provided. If empty, provide a default message.\nstatement:problemData.statement&&problemData.statement.trim()!==\"\"?problemData.statement:\"No statement provided\",problemId};const res=await fetch(`${process.env.REACT_APP_API_URL}/api/problems/problems`,{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`},body:JSON.stringify(payload)});if(res.ok){const newProblem=await res.json();set(state=>{const topics=[...state.topics];const topicIndex=topics.findIndex(t=>t.topicId===newProblem.topicId);if(topicIndex>-1){topics[topicIndex]={...topics[topicIndex],problems:{...topics[topicIndex].problems,[newProblem.problemId]:newProblem}};}else{topics.push({topicId:newProblem.topicId,title:problemData.topicTitle||newProblem.topicId,userId:user?user._id:null,problems:{[newProblem.problemId]:newProblem}});}return{topics};});}else{const errorText=await res.text();console.error('Failed to create problem:',errorText);}}catch(error){console.error('Error creating problem:',error);}},// Update a problem\nupdateProblem:async(topicId,problemId,updates)=>{try{const token=get().token;const res=await fetch(`${process.env.REACT_APP_API_URL}/api/problems/problems/${problemId}`,{method:'PUT',headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`},body:JSON.stringify(updates)});if(res.ok){const updatedProblem=await res.json();set(state=>({topics:state.topics.map(topic=>topic.topicId===topicId?{...topic,problems:{...topic.problems,[problemId]:updatedProblem}}:topic),selectedProblem:state.selectedProblem&&state.selectedProblem.problemId===problemId?updatedProblem:state.selectedProblem}));}else{const errorText=await res.text();console.error('Failed to update problem:',errorText);}}catch(error){console.error('Error updating problem:',error);}},// Delete a problem\ndeleteProblem:async(topicId,problemId)=>{try{const token=get().token;const res=await fetch(`${process.env.REACT_APP_API_URL}/api/problems/problems/${problemId}`,{method:'DELETE',headers:{'Authorization':`Bearer ${token}`}});if(res.ok){set(state=>{const topics=state.topics.map(topic=>{if(topic.topicId===topicId){const newProblems=Object.fromEntries(Object.entries(topic.problems).filter(_ref=>{let[key]=_ref;return key!==problemId;}));return{...topic,problems:newProblems};}return topic;});return{topics:topics.filter(topic=>Object.keys(topic.problems).length>0),selectedProblem:state.selectedProblem&&state.selectedProblem.problemId===problemId?null:state.selectedProblem};});}else{const errorText=await res.text();console.error('Failed to delete problem:',errorText);}}catch(error){console.error('Error deleting problem:',error);}},// Alias for creating a problem\naddProblem:async(topicId,problemData)=>{await get().createProblem({...problemData,topicId});},// --------------------------\n// LOCAL SETTERS & UI HELPERS\n// --------------------------\nsetTopics:topics=>set({topics}),setSelectedTopic:topic=>set({selectedTopic:topic}),setSelectedProblem:problem=>set({selectedProblem:problem}),toggleSidebar:()=>set({isSidebarVisible:!get().isSidebarVisible}),toggleDarkMode:()=>{const newDarkMode=!get().isDarkMode;set({isDarkMode:newDarkMode});document.documentElement.classList.toggle('dark',newDarkMode);},// --------------------------\n// SEARCH & FAVORITES\n// --------------------------\nsearchProblems:query=>{const state=get();if(!query.trim()){set({searchResults:[]});return;}const results=state.topics.flatMap(topic=>Object.values(topic.problems).filter(problem=>problem.title.toLowerCase().includes(query.toLowerCase())||problem.statement.toLowerCase().includes(query.toLowerCase())||problem.difficulty.toLowerCase()===query.toLowerCase()));set({searchResults:results});},toggleFavorite:async problemId=>{try{const state=get();let problem;for(const topic of state.topics){if(topic.problems[problemId]){problem=topic.problems[problemId];break;}}if(!problem)return;const token=state.token;const url=`${process.env.REACT_APP_API_URL}/api/users/favorites`;const method=problem.isFavorite?'DELETE':'POST';const res=await fetch(url,{method,headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`},body:JSON.stringify({problemId})});if(res.ok){set(state=>({topics:state.topics.map(topic=>{if(topic.problems[problemId]){return{...topic,problems:{...topic.problems,[problemId]:{...topic.problems[problemId],isFavorite:!topic.problems[problemId].isFavorite}}};}return topic;}),selectedProblem:state.selectedProblem&&state.selectedProblem.problemId===problemId?{...state.selectedProblem,isFavorite:!state.selectedProblem.isFavorite}:state.selectedProblem}));}}catch(error){console.error('Error toggling favorite:',error);}},toggleSavedForLater:async problemId=>{try{const state=get();let problem;for(const topic of state.topics){if(topic.problems[problemId]){problem=topic.problems[problemId];break;}}if(!problem)return;const token=state.token;const url=`${process.env.REACT_APP_API_URL}/api/users/saved`;const method=problem.isSavedForLater?'DELETE':'POST';const res=await fetch(url,{method,headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`},body:JSON.stringify({problemId})});if(res.ok){set(state=>({topics:state.topics.map(topic=>{if(topic.problems[problemId]){return{...topic,problems:{...topic.problems,[problemId]:{...topic.problems[problemId],isSavedForLater:!topic.problems[problemId].isSavedForLater}}};}return topic;}),selectedProblem:state.selectedProblem&&state.selectedProblem.problemId===problemId?{...state.selectedProblem,isSavedForLater:!state.selectedProblem.isSavedForLater}:state.selectedProblem}));}}catch(error){console.error('Error toggling saved for later:',error);}},toggleSolved:async problemId=>{try{const state=get();let problem;for(const topic of state.topics){if(topic.problems[problemId]){problem=topic.problems[problemId];break;}}if(!problem)return;const token=state.token;const url=`${process.env.REACT_APP_API_URL}/api/users/solved`;const res=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json','Authorization':`Bearer ${token}`},body:JSON.stringify({problemId})});if(res.ok){set(state=>({topics:state.topics.map(topic=>{if(topic.problems[problemId]){return{...topic,problems:{...topic.problems,[problemId]:{...topic.problems[problemId],isSolved:!topic.problems[problemId].isSolved}}};}return topic;}),selectedProblem:state.selectedProblem&&state.selectedProblem.problemId===problemId?{...state.selectedProblem,isSolved:!state.selectedProblem.isSolved}:state.selectedProblem}));}}catch(error){console.error('Error toggling solved:',error);}},// --------------------------\n// AUTHENTICATION HELPER\n// --------------------------\nverifyToken:async()=>{const token=get().token;if(!token)return false;try{const res=await fetch(`${process.env.REACT_APP_API_URL}/api/auth/verify`,{headers:{'Authorization':`Bearer ${token}`}});return res.ok;}catch(error){console.error('Error verifying token:',error);return false;}}}),{name:'coding-notes-storage'}));export default useStore;","map":{"version":3,"names":["create","persist","useStore","set","get","user","token","topics","selectedTopic","selectedProblem","isSidebarVisible","isDarkMode","searchResults","isAuthenticated","setUser","arguments","length","undefined","logout","localStorage","removeItem","fetchTopics","res","fetch","process","env","REACT_APP_API_URL","headers","ok","topicsData","json","formattedTopics","map","topic","topicId","_id","title","userId","problems","errorText","text","console","error","addTopic","Date","now","Math","random","toString","substring","method","body","JSON","stringify","picid","newTopic","state","deleteTopic","filter","fetchProblems","forEach","problem","topicIndex","findIndex","t","problemId","push","topicTitle","createProblem","problemData","randomPart","payload","statement","trim","newProblem","updateProblem","updates","updatedProblem","deleteProblem","newProblems","Object","fromEntries","entries","_ref","key","keys","addProblem","setTopics","setSelectedTopic","setSelectedProblem","toggleSidebar","toggleDarkMode","newDarkMode","document","documentElement","classList","toggle","searchProblems","query","results","flatMap","values","toLowerCase","includes","difficulty","toggleFavorite","url","isFavorite","toggleSavedForLater","isSavedForLater","toggleSolved","isSolved","verifyToken","name"],"sources":["D:/FInal Projects/CodeSave/frontend/src/store/useStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\n\r\nconst useStore = create(\r\n  persist(\r\n    (set, get) => ({\r\n      // Authentication & UI state\r\n      user: null,\r\n      token: null,\r\n      topics: [],\r\n      selectedTopic: null,\r\n      selectedProblem: null,\r\n      isSidebarVisible: true,\r\n      isDarkMode: false,\r\n      searchResults: [],\r\n      isAuthenticated: false,\r\n\r\n      // Set user and token (user id is used for subsequent API calls)\r\n      setUser: (user, token = null) =>\r\n        set({ user, token, isAuthenticated: !!token }),\r\n\r\n      // Clear persisted data on logout\r\n      logout: () => {\r\n        localStorage.removeItem('coding-notes-storage');\r\n        set({ user: null, token: null, isAuthenticated: false, topics: [] });\r\n      },\r\n\r\n      // --------------------------\r\n      // TOPICS FUNCTIONS\r\n      // --------------------------\r\n\r\n      // Fetch topics for the authenticated user\r\n      fetchTopics: async () => {\r\n        try {\r\n          const token = get().token;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/topics`,\r\n            { headers: { 'Authorization': `Bearer ${token}` } }\r\n          );\r\n          if (res.ok) {\r\n            const topicsData = await res.json();\r\n            // Format topics (adjust according to your backend schema)\r\n            const formattedTopics = topicsData.map((topic) => ({\r\n              topicId: topic.topicId || topic._id,\r\n              title: topic.title,\r\n              userId: topic.userId,\r\n              problems: topic.problems || {},\r\n            }));\r\n            set({ topics: formattedTopics });\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to fetch topics:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching topics:', error);\r\n        }\r\n      },\r\n\r\n      // Create a new topic with a generated topicId and a default picid\r\n      addTopic: async (title) => {\r\n        try {\r\n          const token = get().token;\r\n          const user = get().user;\r\n          // Generate a unique topicId using userId, timestamp, and a random string.\r\n          const topicId = `${user._id}_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/topics`,\r\n            {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`,\r\n              },\r\n              body: JSON.stringify({ \r\n                topicId,\r\n                title, \r\n                userId: user ? user._id : null, \r\n                picid: 'defaultPicId' \r\n              }),\r\n            }\r\n          );\r\n          if (res.ok) {\r\n            const newTopic = await res.json();\r\n            set((state) => ({\r\n              topics: [...state.topics, { ...newTopic, problems: {} }],\r\n            }));\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to add topic:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error adding topic:', error);\r\n        }\r\n      },\r\n\r\n      // Delete a topic\r\n      deleteTopic: async (topicId) => {\r\n        try {\r\n          const token = get().token;\r\n          await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/topics/${topicId}`,\r\n            {\r\n              method: 'DELETE',\r\n              headers: { 'Authorization': `Bearer ${token}` },\r\n            }\r\n          );\r\n        } catch (error) {\r\n          console.error('Error deleting topic on backend:', error);\r\n        }\r\n        set((state) => ({\r\n          topics: state.topics.filter((topic) => topic.topicId !== topicId),\r\n        }));\r\n      },\r\n\r\n      // --------------------------\r\n      // PROBLEMS FUNCTIONS\r\n      // --------------------------\r\n\r\n      // Fetch all problems and merge them into their topics\r\n      fetchProblems: async () => {\r\n        try {\r\n          const token = get().token;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/problems`,\r\n            { headers: { 'Authorization': `Bearer ${token}` } }\r\n          );\r\n          if (res.ok) {\r\n            const problems = await res.json();\r\n            set((state) => {\r\n              // Reset problems in each topic\r\n              const topics = state.topics.map((topic) => ({\r\n                ...topic,\r\n                problems: {},\r\n              }));\r\n              // Merge each problem into its corresponding topic\r\n              problems.forEach((problem) => {\r\n                const topicIndex = topics.findIndex(\r\n                  (t) => t.topicId === problem.topicId\r\n                );\r\n                if (topicIndex > -1) {\r\n                  topics[topicIndex].problems[problem.problemId] = problem;\r\n                } else {\r\n                  topics.push({\r\n                    topicId: problem.topicId,\r\n                    title: problem.topicTitle || problem.topicId,\r\n                    userId: problem.userId,\r\n                    problems: { [problem.problemId]: problem },\r\n                  });\r\n                }\r\n              });\r\n              return { topics };\r\n            });\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to fetch problems:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching problems:', error);\r\n        }\r\n      },\r\n\r\n      // Create a new problem with a unique problemId.\r\n      // If the statement is missing or empty, set a default value.\r\n      createProblem: async (problemData) => {\r\n        try {\r\n          const user = get().user;\r\n          const token = get().token;\r\n          // Generate a random string of 6 characters for uniqueness.\r\n          const randomPart = Math.random().toString(36).substring(2, 8);\r\n          // Construct the problemId: userId_topicId_random\r\n          const problemId = `${user._id}_${problemData.topicId}_${randomPart}`;\r\n          const payload = { \r\n            ...problemData, \r\n            userId: user ? user._id : null,\r\n            // Ensure statement is provided. If empty, provide a default message.\r\n            statement: problemData.statement && problemData.statement.trim() !== \"\"\r\n              ? problemData.statement\r\n              : \"No statement provided\",\r\n            problemId \r\n          };\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/problems`,\r\n            {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`,\r\n              },\r\n              body: JSON.stringify(payload),\r\n            }\r\n          );\r\n          if (res.ok) {\r\n            const newProblem = await res.json();\r\n            set((state) => {\r\n              const topics = [...state.topics];\r\n              const topicIndex = topics.findIndex(\r\n                (t) => t.topicId === newProblem.topicId\r\n              );\r\n              if (topicIndex > -1) {\r\n                topics[topicIndex] = {\r\n                  ...topics[topicIndex],\r\n                  problems: {\r\n                    ...topics[topicIndex].problems,\r\n                    [newProblem.problemId]: newProblem,\r\n                  },\r\n                };\r\n              } else {\r\n                topics.push({\r\n                  topicId: newProblem.topicId,\r\n                  title: problemData.topicTitle || newProblem.topicId,\r\n                  userId: user ? user._id : null,\r\n                  problems: { [newProblem.problemId]: newProblem },\r\n                });\r\n              }\r\n              return { topics };\r\n            });\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to create problem:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error creating problem:', error);\r\n        }\r\n      },\r\n\r\n      // Update a problem\r\n      updateProblem: async (topicId, problemId, updates) => {\r\n        try {\r\n          const token = get().token;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/problems/${problemId}`,\r\n            {\r\n              method: 'PUT',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${token}`,\r\n              },\r\n              body: JSON.stringify(updates),\r\n            }\r\n          );\r\n          if (res.ok) {\r\n            const updatedProblem = await res.json();\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) =>\r\n                topic.topicId === topicId\r\n                  ? {\r\n                      ...topic,\r\n                      problems: {\r\n                        ...topic.problems,\r\n                        [problemId]: updatedProblem,\r\n                      },\r\n                    }\r\n                  : topic\r\n              ),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? updatedProblem\r\n                  : state.selectedProblem,\r\n            }));\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to update problem:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error updating problem:', error);\r\n        }\r\n      },\r\n\r\n      // Delete a problem\r\n      deleteProblem: async (topicId, problemId) => {\r\n        try {\r\n          const token = get().token;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/problems/${problemId}`,\r\n            {\r\n              method: 'DELETE',\r\n              headers: { 'Authorization': `Bearer ${token}` },\r\n            }\r\n          );\r\n          if (res.ok) {\r\n            set((state) => {\r\n              const topics = state.topics.map((topic) => {\r\n                if (topic.topicId === topicId) {\r\n                  const newProblems = Object.fromEntries(\r\n                    Object.entries(topic.problems).filter(\r\n                      ([key]) => key !== problemId\r\n                    )\r\n                  );\r\n                  return { ...topic, problems: newProblems };\r\n                }\r\n                return topic;\r\n              });\r\n              return {\r\n                topics: topics.filter(\r\n                  (topic) => Object.keys(topic.problems).length > 0\r\n                ),\r\n                selectedProblem:\r\n                  state.selectedProblem &&\r\n                  state.selectedProblem.problemId === problemId\r\n                    ? null\r\n                    : state.selectedProblem,\r\n              };\r\n            });\r\n          } else {\r\n            const errorText = await res.text();\r\n            console.error('Failed to delete problem:', errorText);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error deleting problem:', error);\r\n        }\r\n      },\r\n\r\n      // Alias for creating a problem\r\n      addProblem: async (topicId, problemData) => {\r\n        await get().createProblem({ ...problemData, topicId });\r\n      },\r\n\r\n      // --------------------------\r\n      // LOCAL SETTERS & UI HELPERS\r\n      // --------------------------\r\n      setTopics: (topics) => set({ topics }),\r\n      setSelectedTopic: (topic) => set({ selectedTopic: topic }),\r\n      setSelectedProblem: (problem) => set({ selectedProblem: problem }),\r\n\r\n      toggleSidebar: () =>\r\n        set({ isSidebarVisible: !get().isSidebarVisible }),\r\n\r\n      toggleDarkMode: () => {\r\n        const newDarkMode = !get().isDarkMode;\r\n        set({ isDarkMode: newDarkMode });\r\n        document.documentElement.classList.toggle('dark', newDarkMode);\r\n      },\r\n\r\n      // --------------------------\r\n      // SEARCH & FAVORITES\r\n      // --------------------------\r\n      searchProblems: (query) => {\r\n        const state = get();\r\n        if (!query.trim()) {\r\n          set({ searchResults: [] });\r\n          return;\r\n        }\r\n        const results = state.topics.flatMap((topic) =>\r\n          Object.values(topic.problems).filter(\r\n            (problem) =>\r\n              problem.title.toLowerCase().includes(query.toLowerCase()) ||\r\n              problem.statement.toLowerCase().includes(query.toLowerCase()) ||\r\n              problem.difficulty.toLowerCase() === query.toLowerCase()\r\n          )\r\n        );\r\n        set({ searchResults: results });\r\n      },\r\n\r\n      toggleFavorite: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/favorites`;\r\n          const method = problem.isFavorite ? 'DELETE' : 'POST';\r\n          const res = await fetch(url, {\r\n            method,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ problemId }),\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isFavorite: !topic.problems[problemId].isFavorite,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? {\r\n                      ...state.selectedProblem,\r\n                      isFavorite: !state.selectedProblem.isFavorite,\r\n                    }\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling favorite:', error);\r\n        }\r\n      },\r\n\r\n      toggleSavedForLater: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/saved`;\r\n          const method = problem.isSavedForLater ? 'DELETE' : 'POST';\r\n          const res = await fetch(url, {\r\n            method,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ problemId }),\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isSavedForLater: !topic.problems[problemId].isSavedForLater,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? {\r\n                      ...state.selectedProblem,\r\n                      isSavedForLater: !state.selectedProblem.isSavedForLater,\r\n                    }\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling saved for later:', error);\r\n        }\r\n      },\r\n\r\n      toggleSolved: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/solved`;\r\n          const res = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ problemId }),\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isSolved: !topic.problems[problemId].isSolved,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? {\r\n                      ...state.selectedProblem,\r\n                      isSolved: !state.selectedProblem.isSolved,\r\n                    }\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling solved:', error);\r\n        }\r\n      },\r\n\r\n      // --------------------------\r\n      // AUTHENTICATION HELPER\r\n      // --------------------------\r\n      verifyToken: async () => {\r\n        const token = get().token;\r\n        if (!token) return false;\r\n        try {\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/auth/verify`,\r\n            { headers: { 'Authorization': `Bearer ${token}` } }\r\n          );\r\n          return res.ok;\r\n        } catch (error) {\r\n          console.error('Error verifying token:', error);\r\n          return false;\r\n        }\r\n      },\r\n    }),\r\n    { name: 'coding-notes-storage' }\r\n  )\r\n);\r\n\r\nexport default useStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}