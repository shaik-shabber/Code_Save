{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nconst useStore = create(persist((set, get) => ({\n  user: null,\n  token: null,\n  topics: [],\n  selectedTopic: null,\n  selectedProblem: null,\n  isSidebarVisible: true,\n  isDarkMode: false,\n  searchResults: [],\n  isAuthenticated: false,\n  // Set the user and token; mark as authenticated if token exists\n  setUser: (user, token = null) => set({\n    user,\n    token,\n    isAuthenticated: !!token\n  }),\n  // Clear user and token and remove persisted data\n  logout: () => {\n    localStorage.removeItem('coding-notes-storage');\n    set({\n      user: null,\n      token: null,\n      isAuthenticated: false\n    });\n  },\n  // Fetch all problems from the backend and group them by topicId.\n  // The backend returns only problems belonging to the authenticated user.\n  fetchProblems: async () => {\n    try {\n      const token = get().token;\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        const problems = await res.json();\n        const topicsMap = {};\n        problems.forEach(problem => {\n          const {\n            topicId\n          } = problem;\n          if (!topicsMap[topicId]) {\n            topicsMap[topicId] = {\n              topicId,\n              title: problem.topicTitle || topicId,\n              problems: {}\n            };\n          }\n          topicsMap[topicId].problems[problem.problemId] = problem;\n        });\n        set({\n          topics: Object.values(topicsMap)\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching problems:', error);\n    }\n  },\n  // Create a new problem via the backend.\n  // Attaches the current user's ID to the problem data.\n  createProblem: async problemData => {\n    try {\n      const user = get().user;\n      const token = get().token;\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          ...problemData,\n          userId: user ? user._id : null\n        })\n      });\n      if (res.ok) {\n        const newProblem = await res.json();\n        // Update local state: add or update the topic with the new problem.\n        set(state => {\n          const topics = state.topics.slice();\n          const topicIndex = topics.findIndex(t => t.topicId === newProblem.topicId);\n          if (topicIndex > -1) {\n            // Update existing topic.\n            topics[topicIndex] = {\n              ...topics[topicIndex],\n              problems: {\n                ...topics[topicIndex].problems,\n                [newProblem.problemId]: newProblem\n              }\n            };\n          } else {\n            // Create new topic.\n            topics.push({\n              topicId: newProblem.topicId,\n              title: problemData.topicTitle || newProblem.topicId,\n              userId: user ? user._id : null,\n              problems: {\n                [newProblem.problemId]: newProblem\n              }\n            });\n          }\n          return {\n            topics\n          };\n        });\n      }\n    } catch (error) {\n      console.error('Error creating problem:', error);\n    }\n  },\n  // Update a problem via the backend.\n  updateProblem: async (topicId, problemId, updates) => {\n    try {\n      const token = get().token;\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/${problemId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(updates)\n      });\n      if (res.ok) {\n        const updatedProblem = await res.json();\n        set(state => ({\n          topics: state.topics.map(topic => topic.topicId === topicId ? {\n            ...topic,\n            problems: {\n              ...topic.problems,\n              [problemId]: updatedProblem\n            }\n          } : topic),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? updatedProblem : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error updating problem:', error);\n    }\n  },\n  // Delete a problem via the backend.\n  // Also updates the topic: if no problems remain, remove the topic.\n  deleteProblem: async (topicId, problemId) => {\n    try {\n      const token = get().token;\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/${problemId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (res.ok) {\n        set(state => {\n          const topics = state.topics.map(topic => {\n            if (topic.topicId === topicId) {\n              const newProblems = Object.fromEntries(Object.entries(topic.problems).filter(([key]) => key !== problemId));\n              return {\n                ...topic,\n                problems: newProblems\n              };\n            }\n            return topic;\n          });\n          // Remove the topic if it has no problems left.\n          return {\n            topics: topics.filter(topic => Object.keys(topic.problems).length > 0),\n            selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? null : state.selectedProblem\n          };\n        });\n      }\n    } catch (error) {\n      console.error('Error deleting problem:', error);\n    }\n  },\n  // Create a new topic locally (or via a backend endpoint if desired).\n  addTopic: async title => {\n    const topicId = Date.now().toString();\n    const user = get().user;\n    const newTopic = {\n      topicId,\n      title,\n      userId: user ? user._id : null,\n      problems: {}\n    };\n    set(state => ({\n      topics: [...state.topics, newTopic]\n    }));\n  },\n  // Delete a topic along with all its problems.\n  // This function calls the backend endpoint to delete the topic and all related problems.\n  deleteTopic: async topicId => {\n    const token = get().token;\n    try {\n      await fetch(`${process.env.REACT_APP_API_URL}/api/topics/${topicId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n    } catch (error) {\n      console.error('Error deleting topic on backend:', error);\n    }\n    // Remove topic locally.\n    set(state => ({\n      topics: state.topics.filter(topic => topic.topicId !== topicId)\n    }));\n  },\n  // Alias addProblem to use createProblem.\n  addProblem: async (topicId, problemData) => {\n    await get().createProblem({\n      ...problemData,\n      topicId\n    });\n  },\n  // Local setters.\n  setTopics: topics => set({\n    topics\n  }),\n  setSelectedTopic: topic => set({\n    selectedTopic: topic\n  }),\n  setSelectedProblem: problem => set({\n    selectedProblem: problem\n  }),\n  toggleSidebar: () => set({\n    isSidebarVisible: !get().isSidebarVisible\n  }),\n  toggleDarkMode: () => {\n    const newDarkMode = !get().isDarkMode;\n    set({\n      isDarkMode: newDarkMode\n    });\n    document.documentElement.classList.toggle('dark', newDarkMode);\n  },\n  // Search problems locally in the store.\n  searchProblems: query => {\n    const state = get();\n    if (!query.trim()) {\n      set({\n        searchResults: []\n      });\n      return;\n    }\n    const results = state.topics.flatMap(topic => Object.values(topic.problems).filter(problem => problem.title.toLowerCase().includes(query.toLowerCase()) || problem.statement.toLowerCase().includes(query.toLowerCase()) || problem.difficulty.toLowerCase() === query.toLowerCase()));\n    set({\n      searchResults: results\n    });\n  },\n  // Toggle Favorite via the user endpoint.\n  toggleFavorite: async problemId => {\n    try {\n      const state = get();\n      let problem;\n      for (const topic of state.topics) {\n        if (topic.problems[problemId]) {\n          problem = topic.problems[problemId];\n          break;\n        }\n      }\n      if (!problem) return;\n      const token = state.token;\n      const url = `${process.env.REACT_APP_API_URL}/api/users/favorites`;\n      const method = problem.isFavorite ? 'DELETE' : 'POST';\n      const res = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          problemId\n        })\n      });\n      if (res.ok) {\n        set(state => ({\n          topics: state.topics.map(topic => {\n            if (topic.problems[problemId]) {\n              return {\n                ...topic,\n                problems: {\n                  ...topic.problems,\n                  [problemId]: {\n                    ...topic.problems[problemId],\n                    isFavorite: !topic.problems[problemId].isFavorite\n                  }\n                }\n              };\n            }\n            return topic;\n          }),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? {\n            ...state.selectedProblem,\n            isFavorite: !state.selectedProblem.isFavorite\n          } : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error toggling favorite:', error);\n    }\n  },\n  toggleSavedForLater: async problemId => {\n    try {\n      const state = get();\n      let problem;\n      for (const topic of state.topics) {\n        if (topic.problems[problemId]) {\n          problem = topic.problems[problemId];\n          break;\n        }\n      }\n      if (!problem) return;\n      const token = state.token;\n      const url = `${process.env.REACT_APP_API_URL}/api/users/saved`;\n      const method = problem.isSavedForLater ? 'DELETE' : 'POST';\n      const res = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          problemId\n        })\n      });\n      if (res.ok) {\n        set(state => ({\n          topics: state.topics.map(topic => {\n            if (topic.problems[problemId]) {\n              return {\n                ...topic,\n                problems: {\n                  ...topic.problems,\n                  [problemId]: {\n                    ...topic.problems[problemId],\n                    isSavedForLater: !topic.problems[problemId].isSavedForLater\n                  }\n                }\n              };\n            }\n            return topic;\n          }),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? {\n            ...state.selectedProblem,\n            isSavedForLater: !state.selectedProblem.isSavedForLater\n          } : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error toggling saved for later:', error);\n    }\n  },\n  toggleSolved: async problemId => {\n    try {\n      const state = get();\n      let problem;\n      for (const topic of state.topics) {\n        if (topic.problems[problemId]) {\n          problem = topic.problems[problemId];\n          break;\n        }\n      }\n      if (!problem) return;\n      const token = state.token;\n      const url = `${process.env.REACT_APP_API_URL}/api/users/solved`;\n      const res = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          problemId\n        })\n      });\n      if (res.ok) {\n        set(state => ({\n          topics: state.topics.map(topic => {\n            if (topic.problems[problemId]) {\n              return {\n                ...topic,\n                problems: {\n                  ...topic.problems,\n                  [problemId]: {\n                    ...topic.problems[problemId],\n                    isSolved: !topic.problems[problemId].isSolved\n                  }\n                }\n              };\n            }\n            return topic;\n          }),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? {\n            ...state.selectedProblem,\n            isSolved: !state.selectedProblem.isSolved\n          } : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error toggling solved:', error);\n    }\n  },\n  verifyToken: async () => {\n    const token = get().token;\n    if (!token) return false;\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/auth/verify`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      return res.ok;\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      return false;\n    }\n  }\n}), {\n  name: 'coding-notes-storage'\n}));\nexport default useStore;","map":{"version":3,"names":["create","persist","useStore","set","get","user","token","topics","selectedTopic","selectedProblem","isSidebarVisible","isDarkMode","searchResults","isAuthenticated","setUser","logout","localStorage","removeItem","fetchProblems","res","fetch","process","env","REACT_APP_API_URL","headers","ok","problems","json","topicsMap","forEach","problem","topicId","title","topicTitle","problemId","Object","values","error","console","createProblem","problemData","method","body","JSON","stringify","userId","_id","newProblem","state","slice","topicIndex","findIndex","t","push","updateProblem","updates","updatedProblem","map","topic","deleteProblem","newProblems","fromEntries","entries","filter","key","keys","length","addTopic","Date","now","toString","newTopic","deleteTopic","addProblem","setTopics","setSelectedTopic","setSelectedProblem","toggleSidebar","toggleDarkMode","newDarkMode","document","documentElement","classList","toggle","searchProblems","query","trim","results","flatMap","toLowerCase","includes","statement","difficulty","toggleFavorite","url","isFavorite","toggleSavedForLater","isSavedForLater","toggleSolved","isSolved","verifyToken","name"],"sources":["D:/FInal Projects/CodeSave/frontend/src/store/useStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\n\r\nconst useStore = create(\r\n  persist(\r\n    (set, get) => ({\r\n      user: null,\r\n      token: null,\r\n      topics: [],\r\n      selectedTopic: null,\r\n      selectedProblem: null,\r\n      isSidebarVisible: true,\r\n      isDarkMode: false,\r\n      searchResults: [],\r\n      isAuthenticated: false,\r\n\r\n      // Set the user and token; mark as authenticated if token exists\r\n      setUser: (user, token = null) =>\r\n        set({ user, token, isAuthenticated: !!token }),\r\n\r\n      // Clear user and token and remove persisted data\r\n      logout: () => {\r\n        localStorage.removeItem('coding-notes-storage');\r\n        set({ user: null, token: null, isAuthenticated: false });\r\n      },\r\n\r\n      // Fetch all problems from the backend and group them by topicId.\r\n      // The backend returns only problems belonging to the authenticated user.\r\n      fetchProblems: async () => {\r\n        try {\r\n          const token = get().token;\r\n          const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems`, {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n          if (res.ok) {\r\n            const problems = await res.json();\r\n            const topicsMap = {};\r\n            problems.forEach((problem) => {\r\n              const { topicId } = problem;\r\n              if (!topicsMap[topicId]) {\r\n                topicsMap[topicId] = {\r\n                  topicId,\r\n                  title: problem.topicTitle || topicId,\r\n                  problems: {},\r\n                };\r\n              }\r\n              topicsMap[topicId].problems[problem.problemId] = problem;\r\n            });\r\n            set({ topics: Object.values(topicsMap) });\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching problems:', error);\r\n        }\r\n      },\r\n\r\n      // Create a new problem via the backend.\r\n      // Attaches the current user's ID to the problem data.\r\n      createProblem: async (problemData) => {\r\n        try {\r\n          const user = get().user;\r\n          const token = get().token;\r\n          const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({\r\n              ...problemData,\r\n              userId: user ? user._id : null,\r\n            }),\r\n          });\r\n          if (res.ok) {\r\n            const newProblem = await res.json();\r\n            // Update local state: add or update the topic with the new problem.\r\n            set((state) => {\r\n              const topics = state.topics.slice();\r\n              const topicIndex = topics.findIndex(t => t.topicId === newProblem.topicId);\r\n              if (topicIndex > -1) {\r\n                // Update existing topic.\r\n                topics[topicIndex] = {\r\n                  ...topics[topicIndex],\r\n                  problems: {\r\n                    ...topics[topicIndex].problems,\r\n                    [newProblem.problemId]: newProblem,\r\n                  },\r\n                };\r\n              } else {\r\n                // Create new topic.\r\n                topics.push({\r\n                  topicId: newProblem.topicId,\r\n                  title: problemData.topicTitle || newProblem.topicId,\r\n                  userId: user ? user._id : null,\r\n                  problems: { [newProblem.problemId]: newProblem },\r\n                });\r\n              }\r\n              return { topics };\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error('Error creating problem:', error);\r\n        }\r\n      },\r\n\r\n      // Update a problem via the backend.\r\n      updateProblem: async (topicId, problemId, updates) => {\r\n        try {\r\n          const token = get().token;\r\n          const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/${problemId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify(updates),\r\n          });\r\n          if (res.ok) {\r\n            const updatedProblem = await res.json();\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) =>\r\n                topic.topicId === topicId\r\n                  ? {\r\n                      ...topic,\r\n                      problems: {\r\n                        ...topic.problems,\r\n                        [problemId]: updatedProblem,\r\n                      },\r\n                    }\r\n                  : topic\r\n              ),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? updatedProblem\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error updating problem:', error);\r\n        }\r\n      },\r\n\r\n      // Delete a problem via the backend.\r\n      // Also updates the topic: if no problems remain, remove the topic.\r\n      deleteProblem: async (topicId, problemId) => {\r\n        try {\r\n          const token = get().token;\r\n          const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/${problemId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n          });\r\n          if (res.ok) {\r\n            set((state) => {\r\n              const topics = state.topics.map((topic) => {\r\n                if (topic.topicId === topicId) {\r\n                  const newProblems = Object.fromEntries(\r\n                    Object.entries(topic.problems).filter(([key]) => key !== problemId)\r\n                  );\r\n                  return { ...topic, problems: newProblems };\r\n                }\r\n                return topic;\r\n              });\r\n              // Remove the topic if it has no problems left.\r\n              return {\r\n                topics: topics.filter(topic => Object.keys(topic.problems).length > 0),\r\n                selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? null : state.selectedProblem,\r\n              };\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error('Error deleting problem:', error);\r\n        }\r\n      },\r\n\r\n      // Create a new topic locally (or via a backend endpoint if desired).\r\n      addTopic: async (title) => {\r\n        const topicId = Date.now().toString();\r\n        const user = get().user;\r\n        const newTopic = {\r\n          topicId,\r\n          title,\r\n          userId: user ? user._id : null,\r\n          problems: {},\r\n        };\r\n        set((state) => ({\r\n          topics: [...state.topics, newTopic],\r\n        }));\r\n      },\r\n\r\n      // Delete a topic along with all its problems.\r\n      // This function calls the backend endpoint to delete the topic and all related problems.\r\n      deleteTopic: async (topicId) => {\r\n        const token = get().token;\r\n        try {\r\n          await fetch(`${process.env.REACT_APP_API_URL}/api/topics/${topicId}`, {\r\n            method: 'DELETE',\r\n            headers: { 'Authorization': `Bearer ${token}` },\r\n          });\r\n        } catch (error) {\r\n          console.error('Error deleting topic on backend:', error);\r\n        }\r\n        // Remove topic locally.\r\n        set((state) => ({\r\n          topics: state.topics.filter((topic) => topic.topicId !== topicId),\r\n        }));\r\n      },\r\n\r\n      // Alias addProblem to use createProblem.\r\n      addProblem: async (topicId, problemData) => {\r\n        await get().createProblem({ ...problemData, topicId });\r\n      },\r\n\r\n      // Local setters.\r\n      setTopics: (topics) => set({ topics }),\r\n      setSelectedTopic: (topic) => set({ selectedTopic: topic }),\r\n      setSelectedProblem: (problem) => set({ selectedProblem: problem }),\r\n\r\n      toggleSidebar: () =>\r\n        set({ isSidebarVisible: !get().isSidebarVisible }),\r\n\r\n      toggleDarkMode: () => {\r\n        const newDarkMode = !get().isDarkMode;\r\n        set({ isDarkMode: newDarkMode });\r\n        document.documentElement.classList.toggle('dark', newDarkMode);\r\n      },\r\n\r\n      // Search problems locally in the store.\r\n      searchProblems: (query) => {\r\n        const state = get();\r\n        if (!query.trim()) {\r\n          set({ searchResults: [] });\r\n          return;\r\n        }\r\n        const results = state.topics.flatMap((topic) =>\r\n          Object.values(topic.problems).filter(\r\n            (problem) =>\r\n              problem.title.toLowerCase().includes(query.toLowerCase()) ||\r\n              problem.statement.toLowerCase().includes(query.toLowerCase()) ||\r\n              problem.difficulty.toLowerCase() === query.toLowerCase()\r\n          )\r\n        );\r\n        set({ searchResults: results });\r\n      },\r\n\r\n      // Toggle Favorite via the user endpoint.\r\n      toggleFavorite: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/favorites`;\r\n          const method = problem.isFavorite ? 'DELETE' : 'POST';\r\n          const res = await fetch(url, {\r\n            method,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({ problemId })\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isFavorite: !topic.problems[problemId].isFavorite,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem: state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                ? { ...state.selectedProblem, isFavorite: !state.selectedProblem.isFavorite }\r\n                : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling favorite:', error);\r\n        }\r\n      },\r\n\r\n      toggleSavedForLater: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/saved`;\r\n          const method = problem.isSavedForLater ? 'DELETE' : 'POST';\r\n          const res = await fetch(url, {\r\n            method,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({ problemId })\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isSavedForLater: !topic.problems[problemId].isSavedForLater,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem: state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                ? { ...state.selectedProblem, isSavedForLater: !state.selectedProblem.isSavedForLater }\r\n                : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling saved for later:', error);\r\n        }\r\n      },\r\n\r\n      toggleSolved: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/solved`;\r\n          const res = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            },\r\n            body: JSON.stringify({ problemId })\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isSolved: !topic.problems[problemId].isSolved,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem: state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                ? { ...state.selectedProblem, isSolved: !state.selectedProblem.isSolved }\r\n                : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling solved:', error);\r\n        }\r\n      },\r\n\r\n      verifyToken: async () => {\r\n        const token = get().token;\r\n        if (!token) return false;\r\n        try {\r\n          const res = await fetch(`${process.env.REACT_APP_API_URL}/api/auth/verify`, {\r\n            headers: { 'Authorization': `Bearer ${token}` }\r\n          });\r\n          return res.ok;\r\n        } catch (error) {\r\n          console.error('Error verifying token:', error);\r\n          return false;\r\n        }\r\n      },\r\n    }),\r\n    { name: 'coding-notes-storage' }\r\n  )\r\n);\r\n\r\nexport default useStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}