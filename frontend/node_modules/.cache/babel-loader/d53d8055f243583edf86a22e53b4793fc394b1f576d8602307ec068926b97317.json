{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nconst useStore = create(persist((set, get) => ({\n  user: null,\n  token: null,\n  topics: [],\n  selectedTopic: null,\n  selectedProblem: null,\n  isSidebarVisible: true,\n  isDarkMode: false,\n  searchResults: [],\n  isAuthenticated: false,\n  // Set the user and token; mark as authenticated if token exists\n  setUser: (user, token = null) => set({\n    user,\n    token,\n    isAuthenticated: !!token\n  }),\n  // Clear user and token and remove persisted data\n  logout: () => {\n    localStorage.removeItem('coding-notes-storage');\n    set({\n      user: null,\n      token: null,\n      isAuthenticated: false\n    });\n  },\n  // Fetch all problems from the backend and group them by topicId.\n  // The backend returns only problems belonging to the authenticated user.\n  fetchProblems: async () => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems`);\n      if (res.ok) {\n        const problems = await res.json();\n        const topicsMap = {};\n        problems.forEach(problem => {\n          const {\n            topicId\n          } = problem;\n          if (!topicsMap[topicId]) {\n            topicsMap[topicId] = {\n              topicId,\n              title: problem.topicTitle || topicId,\n              problems: {}\n            };\n          }\n          topicsMap[topicId].problems[problem.problemId] = problem;\n        });\n        set({\n          topics: Object.values(topicsMap)\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching problems:', error);\n    }\n  },\n  // Create a new problem via the backend.\n  // Attaches the current user's ID to the problem data.\n  createProblem: async problemData => {\n    try {\n      const user = get().user;\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...problemData,\n          userId: user ? user._id : null\n        })\n      });\n      if (res.ok) {\n        const newProblem = await res.json();\n        set(state => ({\n          topics: state.topics.map(topic => topic.topicId === newProblem.topicId ? {\n            ...topic,\n            problems: {\n              ...topic.problems,\n              [newProblem.problemId]: newProblem\n            }\n          } : topic)\n        }));\n      }\n    } catch (error) {\n      console.error('Error creating problem:', error);\n    }\n  },\n  // Update a problem via the backend.\n  updateProblem: async (topicId, problemId, updates) => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/${problemId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      });\n      if (res.ok) {\n        const updatedProblem = await res.json();\n        set(state => ({\n          topics: state.topics.map(topic => topic.topicId === topicId ? {\n            ...topic,\n            problems: {\n              ...topic.problems,\n              [problemId]: updatedProblem\n            }\n          } : topic),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? updatedProblem : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error updating problem:', error);\n    }\n  },\n  // Delete a problem via the backend.\n  deleteProblem: async (topicId, problemId) => {\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/problems/${problemId}`, {\n        method: 'DELETE'\n      });\n      if (res.ok) {\n        set(state => ({\n          topics: state.topics.map(topic => topic.topicId === topicId ? {\n            ...topic,\n            problems: Object.fromEntries(Object.entries(topic.problems).filter(([key]) => key !== problemId))\n          } : topic),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? null : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error deleting problem:', error);\n    }\n  },\n  // Add a new topic.\n  // For simplicity, this function creates a topic locally.\n  // You may extend it to call a backend endpoint if needed.\n  addTopic: async title => {\n    const topicId = Date.now().toString();\n    const user = get().user;\n    const newTopic = {\n      topicId,\n      title,\n      userId: user ? user._id : null,\n      problems: {}\n    };\n    set(state => ({\n      topics: [...state.topics, newTopic]\n    }));\n  },\n  // Delete a topic locally.\n  // Extend this to call a backend API if required.\n  deleteTopic: async topicId => {\n    set(state => ({\n      topics: state.topics.filter(topic => topic.topicId !== topicId)\n    }));\n  },\n  // Alias addProblem to use createProblem.\n  addProblem: async (topicId, problemData) => {\n    await get().createProblem({\n      ...problemData,\n      topicId\n    });\n  },\n  // Local setters for topics, selectedTopic, and selectedProblem.\n  setTopics: topics => set({\n    topics\n  }),\n  setSelectedTopic: topic => set({\n    selectedTopic: topic\n  }),\n  setSelectedProblem: problem => set({\n    selectedProblem: problem\n  }),\n  toggleSidebar: () => set({\n    isSidebarVisible: !get().isSidebarVisible\n  }),\n  toggleDarkMode: () => {\n    const newDarkMode = !get().isDarkMode;\n    set({\n      isDarkMode: newDarkMode\n    });\n    document.documentElement.classList.toggle('dark', newDarkMode);\n  },\n  // Search problems locally in the store.\n  searchProblems: query => {\n    const state = get();\n    if (!query.trim()) {\n      set({\n        searchResults: []\n      });\n      return;\n    }\n    const results = state.topics.flatMap(topic => Object.values(topic.problems).filter(problem => problem.title.toLowerCase().includes(query.toLowerCase()) || problem.statement.toLowerCase().includes(query.toLowerCase()) || problem.difficulty.toLowerCase() === query.toLowerCase()));\n    set({\n      searchResults: results\n    });\n  },\n  // Toggle Favorite via the user endpoint.\n  toggleFavorite: async problemId => {\n    try {\n      const state = get();\n      let problem;\n      for (const topic of state.topics) {\n        if (topic.problems[problemId]) {\n          problem = topic.problems[problemId];\n          break;\n        }\n      }\n      if (!problem) return;\n      const token = state.token;\n      const url = `${process.env.REACT_APP_API_URL}/api/users/favorites`;\n      const method = problem.isFavorite ? 'DELETE' : 'POST';\n      const res = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          problemId\n        })\n      });\n      if (res.ok) {\n        set(state => ({\n          topics: state.topics.map(topic => {\n            if (topic.problems[problemId]) {\n              return {\n                ...topic,\n                problems: {\n                  ...topic.problems,\n                  [problemId]: {\n                    ...topic.problems[problemId],\n                    isFavorite: !topic.problems[problemId].isFavorite\n                  }\n                }\n              };\n            }\n            return topic;\n          }),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? {\n            ...state.selectedProblem,\n            isFavorite: !state.selectedProblem.isFavorite\n          } : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error toggling favorite:', error);\n    }\n  },\n  // Toggle Saved For Later via the user endpoint.\n  toggleSavedForLater: async problemId => {\n    try {\n      const state = get();\n      let problem;\n      for (const topic of state.topics) {\n        if (topic.problems[problemId]) {\n          problem = topic.problems[problemId];\n          break;\n        }\n      }\n      if (!problem) return;\n      const token = state.token;\n      const url = `${process.env.REACT_APP_API_URL}/api/users/saved`;\n      const method = problem.isSavedForLater ? 'DELETE' : 'POST';\n      const res = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          problemId\n        })\n      });\n      if (res.ok) {\n        set(state => ({\n          topics: state.topics.map(topic => {\n            if (topic.problems[problemId]) {\n              return {\n                ...topic,\n                problems: {\n                  ...topic.problems,\n                  [problemId]: {\n                    ...topic.problems[problemId],\n                    isSavedForLater: !topic.problems[problemId].isSavedForLater\n                  }\n                }\n              };\n            }\n            return topic;\n          }),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? {\n            ...state.selectedProblem,\n            isSavedForLater: !state.selectedProblem.isSavedForLater\n          } : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error toggling saved for later:', error);\n    }\n  },\n  // Toggle Solved via the user endpoint.\n  toggleSolved: async problemId => {\n    try {\n      const state = get();\n      let problem;\n      for (const topic of state.topics) {\n        if (topic.problems[problemId]) {\n          problem = topic.problems[problemId];\n          break;\n        }\n      }\n      if (!problem) return;\n      const token = state.token;\n      const url = `${process.env.REACT_APP_API_URL}/api/users/solved`;\n      const res = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          problemId\n        })\n      });\n      if (res.ok) {\n        set(state => ({\n          topics: state.topics.map(topic => {\n            if (topic.problems[problemId]) {\n              return {\n                ...topic,\n                problems: {\n                  ...topic.problems,\n                  [problemId]: {\n                    ...topic.problems[problemId],\n                    isSolved: !topic.problems[problemId].isSolved\n                  }\n                }\n              };\n            }\n            return topic;\n          }),\n          selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? {\n            ...state.selectedProblem,\n            isSolved: !state.selectedProblem.isSolved\n          } : state.selectedProblem\n        }));\n      }\n    } catch (error) {\n      console.error('Error toggling solved:', error);\n    }\n  },\n  // Verify token via backend.\n  verifyToken: async () => {\n    const token = get().token;\n    if (!token) return false;\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/auth/verify`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return res.ok;\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      return false;\n    }\n  }\n}), {\n  name: 'coding-notes-storage'\n}));\nexport default useStore;","map":{"version":3,"names":["create","persist","useStore","set","get","user","token","topics","selectedTopic","selectedProblem","isSidebarVisible","isDarkMode","searchResults","isAuthenticated","setUser","logout","localStorage","removeItem","fetchProblems","res","fetch","process","env","REACT_APP_API_URL","ok","problems","json","topicsMap","forEach","problem","topicId","title","topicTitle","problemId","Object","values","error","console","createProblem","problemData","method","headers","body","JSON","stringify","userId","_id","newProblem","state","map","topic","updateProblem","updates","updatedProblem","deleteProblem","fromEntries","entries","filter","key","addTopic","Date","now","toString","newTopic","deleteTopic","addProblem","setTopics","setSelectedTopic","setSelectedProblem","toggleSidebar","toggleDarkMode","newDarkMode","document","documentElement","classList","toggle","searchProblems","query","trim","results","flatMap","toLowerCase","includes","statement","difficulty","toggleFavorite","url","isFavorite","Authorization","toggleSavedForLater","isSavedForLater","toggleSolved","isSolved","verifyToken","name"],"sources":["D:/FInal Projects/CodeSave/frontend/src/store/useStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\n\r\nconst useStore = create(\r\n  persist(\r\n    (set, get) => ({\r\n      user: null,\r\n      token: null,\r\n      topics: [],\r\n      selectedTopic: null,\r\n      selectedProblem: null,\r\n      isSidebarVisible: true,\r\n      isDarkMode: false,\r\n      searchResults: [],\r\n      isAuthenticated: false,\r\n\r\n      // Set the user and token; mark as authenticated if token exists\r\n      setUser: (user, token = null) =>\r\n        set({ user, token, isAuthenticated: !!token }),\r\n\r\n      // Clear user and token and remove persisted data\r\n      logout: () => {\r\n        localStorage.removeItem('coding-notes-storage');\r\n        set({ user: null, token: null, isAuthenticated: false });\r\n      },\r\n\r\n      // Fetch all problems from the backend and group them by topicId.\r\n      // The backend returns only problems belonging to the authenticated user.\r\n      fetchProblems: async () => {\r\n        try {\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems`\r\n          );\r\n          if (res.ok) {\r\n            const problems = await res.json();\r\n            const topicsMap = {};\r\n            problems.forEach((problem) => {\r\n              const { topicId } = problem;\r\n              if (!topicsMap[topicId]) {\r\n                topicsMap[topicId] = {\r\n                  topicId,\r\n                  title: problem.topicTitle || topicId,\r\n                  problems: {},\r\n                };\r\n              }\r\n              topicsMap[topicId].problems[problem.problemId] = problem;\r\n            });\r\n            set({ topics: Object.values(topicsMap) });\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching problems:', error);\r\n        }\r\n      },\r\n\r\n      // Create a new problem via the backend.\r\n      // Attaches the current user's ID to the problem data.\r\n      createProblem: async (problemData) => {\r\n        try {\r\n          const user = get().user;\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems`,\r\n            {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify({\r\n                ...problemData,\r\n                userId: user ? user._id : null,\r\n              }),\r\n            }\r\n          );\r\n          if (res.ok) {\r\n            const newProblem = await res.json();\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) =>\r\n                topic.topicId === newProblem.topicId\r\n                  ? {\r\n                      ...topic,\r\n                      problems: {\r\n                        ...topic.problems,\r\n                        [newProblem.problemId]: newProblem,\r\n                      },\r\n                    }\r\n                  : topic\r\n              ),\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error creating problem:', error);\r\n        }\r\n      },\r\n\r\n      // Update a problem via the backend.\r\n      updateProblem: async (topicId, problemId, updates) => {\r\n        try {\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/${problemId}`,\r\n            {\r\n              method: 'PUT',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify(updates),\r\n            }\r\n          );\r\n          if (res.ok) {\r\n            const updatedProblem = await res.json();\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) =>\r\n                topic.topicId === topicId\r\n                  ? {\r\n                      ...topic,\r\n                      problems: {\r\n                        ...topic.problems,\r\n                        [problemId]: updatedProblem,\r\n                      },\r\n                    }\r\n                  : topic\r\n              ),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? updatedProblem\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error updating problem:', error);\r\n        }\r\n      },\r\n\r\n      // Delete a problem via the backend.\r\n      deleteProblem: async (topicId, problemId) => {\r\n        try {\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/problems/${problemId}`,\r\n            { method: 'DELETE' }\r\n          );\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) =>\r\n                topic.topicId === topicId\r\n                  ? {\r\n                      ...topic,\r\n                      problems: Object.fromEntries(\r\n                        Object.entries(topic.problems).filter(\r\n                          ([key]) => key !== problemId\r\n                        )\r\n                      ),\r\n                    }\r\n                  : topic\r\n              ),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? null\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error deleting problem:', error);\r\n        }\r\n      },\r\n\r\n      // Add a new topic.\r\n      // For simplicity, this function creates a topic locally.\r\n      // You may extend it to call a backend endpoint if needed.\r\n      addTopic: async (title) => {\r\n        const topicId = Date.now().toString();\r\n        const user = get().user;\r\n        const newTopic = {\r\n          topicId,\r\n          title,\r\n          userId: user ? user._id : null,\r\n          problems: {},\r\n        };\r\n        set((state) => ({\r\n          topics: [...state.topics, newTopic],\r\n        }));\r\n      },\r\n\r\n      // Delete a topic locally.\r\n      // Extend this to call a backend API if required.\r\n      deleteTopic: async (topicId) => {\r\n        set((state) => ({\r\n          topics: state.topics.filter((topic) => topic.topicId !== topicId),\r\n        }));\r\n      },\r\n\r\n      // Alias addProblem to use createProblem.\r\n      addProblem: async (topicId, problemData) => {\r\n        await get().createProblem({ ...problemData, topicId });\r\n      },\r\n\r\n      // Local setters for topics, selectedTopic, and selectedProblem.\r\n      setTopics: (topics) => set({ topics }),\r\n      setSelectedTopic: (topic) => set({ selectedTopic: topic }),\r\n      setSelectedProblem: (problem) => set({ selectedProblem: problem }),\r\n\r\n      toggleSidebar: () =>\r\n        set({ isSidebarVisible: !get().isSidebarVisible }),\r\n\r\n      toggleDarkMode: () => {\r\n        const newDarkMode = !get().isDarkMode;\r\n        set({ isDarkMode: newDarkMode });\r\n        document.documentElement.classList.toggle('dark', newDarkMode);\r\n      },\r\n\r\n      // Search problems locally in the store.\r\n      searchProblems: (query) => {\r\n        const state = get();\r\n        if (!query.trim()) {\r\n          set({ searchResults: [] });\r\n          return;\r\n        }\r\n        const results = state.topics.flatMap((topic) =>\r\n          Object.values(topic.problems).filter(\r\n            (problem) =>\r\n              problem.title.toLowerCase().includes(query.toLowerCase()) ||\r\n              problem.statement.toLowerCase().includes(query.toLowerCase()) ||\r\n              problem.difficulty.toLowerCase() === query.toLowerCase()\r\n          )\r\n        );\r\n        set({ searchResults: results });\r\n      },\r\n\r\n      // Toggle Favorite via the user endpoint.\r\n      toggleFavorite: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/favorites`;\r\n          const method = problem.isFavorite ? 'DELETE' : 'POST';\r\n          const res = await fetch(url, {\r\n            method,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ problemId }),\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isFavorite: !topic.problems[problemId].isFavorite,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? {\r\n                      ...state.selectedProblem,\r\n                      isFavorite: !state.selectedProblem.isFavorite,\r\n                    }\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling favorite:', error);\r\n        }\r\n      },\r\n\r\n      // Toggle Saved For Later via the user endpoint.\r\n      toggleSavedForLater: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/saved`;\r\n          const method = problem.isSavedForLater ? 'DELETE' : 'POST';\r\n          const res = await fetch(url, {\r\n            method,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ problemId }),\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isSavedForLater: !topic.problems[problemId].isSavedForLater,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? {\r\n                      ...state.selectedProblem,\r\n                      isSavedForLater:\r\n                        !state.selectedProblem.isSavedForLater,\r\n                    }\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling saved for later:', error);\r\n        }\r\n      },\r\n\r\n      // Toggle Solved via the user endpoint.\r\n      toggleSolved: async (problemId) => {\r\n        try {\r\n          const state = get();\r\n          let problem;\r\n          for (const topic of state.topics) {\r\n            if (topic.problems[problemId]) {\r\n              problem = topic.problems[problemId];\r\n              break;\r\n            }\r\n          }\r\n          if (!problem) return;\r\n          const token = state.token;\r\n          const url = `${process.env.REACT_APP_API_URL}/api/users/solved`;\r\n          const res = await fetch(url, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n            body: JSON.stringify({ problemId }),\r\n          });\r\n          if (res.ok) {\r\n            set((state) => ({\r\n              topics: state.topics.map((topic) => {\r\n                if (topic.problems[problemId]) {\r\n                  return {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...topic.problems[problemId],\r\n                        isSolved: !topic.problems[problemId].isSolved,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return topic;\r\n              }),\r\n              selectedProblem:\r\n                state.selectedProblem &&\r\n                state.selectedProblem.problemId === problemId\r\n                  ? {\r\n                      ...state.selectedProblem,\r\n                      isSolved: !state.selectedProblem.isSolved,\r\n                    }\r\n                  : state.selectedProblem,\r\n            }));\r\n          }\r\n        } catch (error) {\r\n          console.error('Error toggling solved:', error);\r\n        }\r\n      },\r\n\r\n      // Verify token via backend.\r\n      verifyToken: async () => {\r\n        const token = get().token;\r\n        if (!token) return false;\r\n        try {\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/auth/verify`,\r\n            {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            }\r\n          );\r\n          return res.ok;\r\n        } catch (error) {\r\n          console.error('Error verifying token:', error);\r\n          return false;\r\n        }\r\n      },\r\n    }),\r\n    { name: 'coding-notes-storage' }\r\n  )\r\n);\r\n\r\nexport default useStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}