{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\n// Optionally define constants if needed:\nconst Difficulty = {\n  Easy: 'Easy',\n  Medium: 'Medium',\n  Hard: 'Hard'\n};\nconst Language = {\n  JavaScript: 'javascript',\n  TypeScript: 'typescript',\n  Python: 'python',\n  Java: 'java',\n  Cpp: 'cpp'\n};\nconst useStore = create(persist((set, get) => ({\n  user: null,\n  token: null,\n  topics: [],\n  selectedTopic: null,\n  selectedProblem: null,\n  isSidebarVisible: true,\n  isDarkMode: false,\n  searchResults: [],\n  isAuthenticated: false,\n  // Set the user and optional token; mark as authenticated if token exists\n  setUser: (user, token = null) => set({\n    user,\n    token,\n    isAuthenticated: !!token\n  }),\n  // Clear user and token\n  logout: () => set({\n    user: null,\n    token: null,\n    isAuthenticated: false\n  }),\n  setTopics: topics => set({\n    topics\n  }),\n  setSelectedTopic: topic => set({\n    selectedTopic: topic\n  }),\n  setSelectedProblem: problem => set({\n    selectedProblem: problem\n  }),\n  toggleSidebar: () => set({\n    isSidebarVisible: !get().isSidebarVisible\n  }),\n  toggleDarkMode: () => {\n    const newDarkMode = !get().isDarkMode;\n    set({\n      isDarkMode: newDarkMode\n    });\n    document.documentElement.classList.toggle('dark', newDarkMode);\n  },\n  addTopic: title => set(state => ({\n    topics: [...state.topics, {\n      topicId: crypto.randomUUID(),\n      title,\n      problems: {}\n    }]\n  })),\n  deleteTopic: topicId => set(state => {\n    const updatedTopics = state.topics.filter(topic => topic.topicId !== topicId);\n    return {\n      topics: updatedTopics,\n      selectedTopic: state.selectedTopic && state.selectedTopic.topicId === topicId ? null : state.selectedTopic,\n      selectedProblem: state.selectedProblem && state.selectedProblem.topicId === topicId ? null : state.selectedProblem\n    };\n  }),\n  deleteProblem: (topicId, problemId) => set(state => {\n    const updatedTopics = state.topics.map(topic => topic.topicId === topicId ? {\n      ...topic,\n      problems: Object.fromEntries(Object.entries(topic.problems).filter(([key]) => key !== problemId))\n    } : topic);\n    return {\n      topics: updatedTopics,\n      selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? null : state.selectedProblem\n    };\n  }),\n  addProblem: (topicId, problem) => set(state => {\n    const problemId = crypto.randomUUID();\n    return {\n      topics: state.topics.map(topic => topic.topicId === topicId ? {\n        ...topic,\n        problems: {\n          ...topic.problems,\n          [problemId]: {\n            ...problem,\n            problemId,\n            topicId,\n            isFavorite: false,\n            isSavedForLater: false,\n            isSolved: false\n          }\n        }\n      } : topic)\n    };\n  }),\n  updateProblem: (topicId, problemId, updates) => set(state => ({\n    topics: state.topics.map(topic => topic.topicId === topicId ? {\n      ...topic,\n      problems: {\n        ...topic.problems,\n        [problemId]: {\n          ...topic.problems[problemId],\n          ...updates\n        }\n      }\n    } : topic),\n    selectedProblem: state.selectedProblem && state.selectedProblem.problemId === problemId ? {\n      ...state.selectedProblem,\n      ...updates\n    } : state.selectedProblem\n  })),\n  searchProblems: query => {\n    const state = get();\n    if (!query.trim()) {\n      set({\n        searchResults: []\n      });\n      return;\n    }\n    const results = state.topics.flatMap(topic => Object.values(topic.problems).filter(problem => problem.title.toLowerCase().includes(query.toLowerCase()) || problem.statement.toLowerCase().includes(query.toLowerCase()) || problem.difficulty.toLowerCase() === query.toLowerCase()));\n    set({\n      searchResults: results\n    });\n  },\n  toggleFavorite: problemId => set(state => ({\n    topics: state.topics.map(topic => {\n      if (problemId in topic.problems) {\n        return {\n          ...topic,\n          problems: {\n            ...topic.problems,\n            [problemId]: {\n              ...topic.problems[problemId],\n              isFavorite: !topic.problems[problemId].isFavorite\n            }\n          }\n        };\n      }\n      return topic;\n    })\n  })),\n  toggleSavedForLater: problemId => set(state => ({\n    topics: state.topics.map(topic => {\n      if (problemId in topic.problems) {\n        return {\n          ...topic,\n          problems: {\n            ...topic.problems,\n            [problemId]: {\n              ...topic.problems[problemId],\n              isSavedForLater: !topic.problems[problemId].isSavedForLater\n            }\n          }\n        };\n      }\n      return topic;\n    })\n  })),\n  toggleSolved: problemId => set(state => ({\n    topics: state.topics.map(topic => {\n      if (problemId in topic.problems) {\n        return {\n          ...topic,\n          problems: {\n            ...topic.problems,\n            [problemId]: {\n              ...topic.problems[problemId],\n              isSolved: !topic.problems[problemId].isSolved\n            }\n          }\n        };\n      }\n      return topic;\n    })\n  })),\n  verifyToken: async () => {\n    const token = get().token;\n    if (!token) {\n      return false;\n    }\n    try {\n      const res = await fetch(`${process.env.REACT_APP_API_URL}/api/auth/verify`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return res.ok;\n    } catch (error) {\n      console.error('Error verifying token:', error);\n      return false;\n    }\n  }\n}), {\n  name: 'coding-notes-storage'\n}));\nexport default useStore;","map":{"version":3,"names":["create","persist","Difficulty","Easy","Medium","Hard","Language","JavaScript","TypeScript","Python","Java","Cpp","useStore","set","get","user","token","topics","selectedTopic","selectedProblem","isSidebarVisible","isDarkMode","searchResults","isAuthenticated","setUser","logout","setTopics","setSelectedTopic","topic","setSelectedProblem","problem","toggleSidebar","toggleDarkMode","newDarkMode","document","documentElement","classList","toggle","addTopic","title","state","topicId","crypto","randomUUID","problems","deleteTopic","updatedTopics","filter","deleteProblem","problemId","map","Object","fromEntries","entries","key","addProblem","isFavorite","isSavedForLater","isSolved","updateProblem","updates","searchProblems","query","trim","results","flatMap","values","toLowerCase","includes","statement","difficulty","toggleFavorite","toggleSavedForLater","toggleSolved","verifyToken","res","fetch","process","env","REACT_APP_API_URL","headers","Authorization","ok","error","console","name"],"sources":["D:/FInal Projects/CodeSave/frontend/src/store/useStore.js"],"sourcesContent":["import { create } from 'zustand';\r\nimport { persist } from 'zustand/middleware';\r\n\r\n// Optionally define constants if needed:\r\nconst Difficulty = { Easy: 'Easy', Medium: 'Medium', Hard: 'Hard' };\r\nconst Language = {\r\n  JavaScript: 'javascript',\r\n  TypeScript: 'typescript',\r\n  Python: 'python',\r\n  Java: 'java',\r\n  Cpp: 'cpp',\r\n};\r\n\r\nconst useStore = create(\r\n  persist(\r\n    (set, get) => ({\r\n      user: null,\r\n      token: null,\r\n      topics: [],\r\n      selectedTopic: null,\r\n      selectedProblem: null,\r\n      isSidebarVisible: true,\r\n      isDarkMode: false,\r\n      searchResults: [],\r\n      isAuthenticated: false,\r\n\r\n      // Set the user and optional token; mark as authenticated if token exists\r\n      setUser: (user, token = null) =>\r\n        set({ user, token, isAuthenticated: !!token }),\r\n\r\n      // Clear user and token\r\n      logout: () => set({ user: null, token: null, isAuthenticated: false }),\r\n\r\n      setTopics: (topics) => set({ topics }),\r\n      setSelectedTopic: (topic) => set({ selectedTopic: topic }),\r\n      setSelectedProblem: (problem) => set({ selectedProblem: problem }),\r\n      toggleSidebar: () =>\r\n        set({ isSidebarVisible: !get().isSidebarVisible }),\r\n      toggleDarkMode: () => {\r\n        const newDarkMode = !get().isDarkMode;\r\n        set({ isDarkMode: newDarkMode });\r\n        document.documentElement.classList.toggle('dark', newDarkMode);\r\n      },\r\n      addTopic: (title) =>\r\n        set((state) => ({\r\n          topics: [\r\n            ...state.topics,\r\n            { topicId: crypto.randomUUID(), title, problems: {} },\r\n          ],\r\n        })),\r\n      deleteTopic: (topicId) =>\r\n        set((state) => {\r\n          const updatedTopics = state.topics.filter(\r\n            (topic) => topic.topicId !== topicId\r\n          );\r\n          return {\r\n            topics: updatedTopics,\r\n            selectedTopic:\r\n              state.selectedTopic && state.selectedTopic.topicId === topicId\r\n                ? null\r\n                : state.selectedTopic,\r\n            selectedProblem:\r\n              state.selectedProblem &&\r\n              state.selectedProblem.topicId === topicId\r\n                ? null\r\n                : state.selectedProblem,\r\n          };\r\n        }),\r\n      deleteProblem: (topicId, problemId) =>\r\n        set((state) => {\r\n          const updatedTopics = state.topics.map((topic) =>\r\n            topic.topicId === topicId\r\n              ? {\r\n                  ...topic,\r\n                  problems: Object.fromEntries(\r\n                    Object.entries(topic.problems).filter(\r\n                      ([key]) => key !== problemId\r\n                    )\r\n                  ),\r\n                }\r\n              : topic\r\n          );\r\n          return {\r\n            topics: updatedTopics,\r\n            selectedProblem:\r\n              state.selectedProblem &&\r\n              state.selectedProblem.problemId === problemId\r\n                ? null\r\n                : state.selectedProblem,\r\n          };\r\n        }),\r\n      addProblem: (topicId, problem) =>\r\n        set((state) => {\r\n          const problemId = crypto.randomUUID();\r\n          return {\r\n            topics: state.topics.map((topic) =>\r\n              topic.topicId === topicId\r\n                ? {\r\n                    ...topic,\r\n                    problems: {\r\n                      ...topic.problems,\r\n                      [problemId]: {\r\n                        ...problem,\r\n                        problemId,\r\n                        topicId,\r\n                        isFavorite: false,\r\n                        isSavedForLater: false,\r\n                        isSolved: false,\r\n                      },\r\n                    },\r\n                  }\r\n                : topic\r\n            ),\r\n          };\r\n        }),\r\n      updateProblem: (topicId, problemId, updates) =>\r\n        set((state) => ({\r\n          topics: state.topics.map((topic) =>\r\n            topic.topicId === topicId\r\n              ? {\r\n                  ...topic,\r\n                  problems: {\r\n                    ...topic.problems,\r\n                    [problemId]: { ...topic.problems[problemId], ...updates },\r\n                  },\r\n                }\r\n              : topic\r\n          ),\r\n          selectedProblem:\r\n            state.selectedProblem &&\r\n            state.selectedProblem.problemId === problemId\r\n              ? { ...state.selectedProblem, ...updates }\r\n              : state.selectedProblem,\r\n        })),\r\n      searchProblems: (query) => {\r\n        const state = get();\r\n        if (!query.trim()) {\r\n          set({ searchResults: [] });\r\n          return;\r\n        }\r\n        const results = state.topics.flatMap((topic) =>\r\n          Object.values(topic.problems).filter(\r\n            (problem) =>\r\n              problem.title.toLowerCase().includes(query.toLowerCase()) ||\r\n              problem.statement.toLowerCase().includes(query.toLowerCase()) ||\r\n              problem.difficulty.toLowerCase() === query.toLowerCase()\r\n          )\r\n        );\r\n        set({ searchResults: results });\r\n      },\r\n      toggleFavorite: (problemId) =>\r\n        set((state) => ({\r\n          topics: state.topics.map((topic) => {\r\n            if (problemId in topic.problems) {\r\n              return {\r\n                ...topic,\r\n                problems: {\r\n                  ...topic.problems,\r\n                  [problemId]: {\r\n                    ...topic.problems[problemId],\r\n                    isFavorite: !topic.problems[problemId].isFavorite,\r\n                  },\r\n                },\r\n              };\r\n            }\r\n            return topic;\r\n          }),\r\n        })),\r\n      toggleSavedForLater: (problemId) =>\r\n        set((state) => ({\r\n          topics: state.topics.map((topic) => {\r\n            if (problemId in topic.problems) {\r\n              return {\r\n                ...topic,\r\n                problems: {\r\n                  ...topic.problems,\r\n                  [problemId]: {\r\n                    ...topic.problems[problemId],\r\n                    isSavedForLater: !topic.problems[problemId].isSavedForLater,\r\n                  },\r\n                },\r\n              };\r\n            }\r\n            return topic;\r\n          }),\r\n        })),\r\n      toggleSolved: (problemId) =>\r\n        set((state) => ({\r\n          topics: state.topics.map((topic) => {\r\n            if (problemId in topic.problems) {\r\n              return {\r\n                ...topic,\r\n                problems: {\r\n                  ...topic.problems,\r\n                  [problemId]: {\r\n                    ...topic.problems[problemId],\r\n                    isSolved: !topic.problems[problemId].isSolved,\r\n                  },\r\n                },\r\n              };\r\n            }\r\n            return topic;\r\n          }),\r\n        })),\r\n      verifyToken: async () => {\r\n        const token = get().token;\r\n        if (!token) {\r\n          return false;\r\n        }\r\n        try {\r\n          const res = await fetch(\r\n            `${process.env.REACT_APP_API_URL}/api/auth/verify`,\r\n            {\r\n              headers: { Authorization: `Bearer ${token}` },\r\n            }\r\n          );\r\n          return res.ok;\r\n        } catch (error) {\r\n          console.error('Error verifying token:', error);\r\n          return false;\r\n        }\r\n      },\r\n    }),\r\n    { name: 'coding-notes-storage' }\r\n  )\r\n);\r\n\r\nexport default useStore;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}